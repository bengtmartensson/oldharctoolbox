/*
Copyright (C) 2009 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

package harc;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * This class is an abstraction of a thing with a number of buttons on it.
 */
public class button_remote {

    public static final String extension = "xml";

    private String id;
    private String name;
    private String description;
    private String[] rdffiles;
    private button[] buttons;
    private String[] states;
    private boolean valid = false;

    /** A button within a button_remote. */
    public static class button {
        String name;
        String notes;
        short keycode;

        public String get_name() {
            return name;
        }

        public String get_notes() {
            return notes;
        }

        public short get_keycode() {
            return keycode;
        }

        public button(String name, String notes, short keycode) {
            this.name = name;
            this.notes = notes;
            this.keycode = keycode;
        }

        public button(String name, short keycode) {
            this (name, null, keycode);
        }
    }

    public void export(String brfilename) throws FileNotFoundException {
        Document doc = harcutils.newDocument();
        Element root = doc.createElement("button_remote");
        root.setAttribute("id", id);
        root.setAttribute("name", name);
        root.setAttribute("description", description);
        doc.appendChild(root);

        Element general = doc.createElement("general");
        root.appendChild(general);
        Element notes = doc.createElement("notes");
        notes.setTextContent("Automatically generated by Harc.");
        general.appendChild(notes);

        if (states.length > 1) {
            Element states_el = doc.createElement("states");
            general.appendChild(states_el);
            for (int i = 0; i < states.length; i++) {
                Element state = doc.createElement("state");
                state.setAttribute("name", states[i]);
                states_el.appendChild(state);
            }
        }
        for (int i = 0; i < rdffiles.length; i++) {
            Element rdffile = doc.createElement("rdffile");
            rdffile.setAttribute("file", rdffiles[i]);
            general.appendChild(rdffile);
        }
        Element buttons_el = doc.createElement("buttons");
        root.appendChild(buttons_el);
        for (int i = 0; i < buttons.length; i++) {
            Element button = doc.createElement("button");
            button b = buttons[i];
            button.setAttribute("name", b.name);
            button.setAttribute("keycode", Integer.toString(b.keycode));
            if (b.notes != null)
                button.setAttribute("notes", b.notes);
            buttons_el.appendChild(button);
        }
        
        harcutils.printDOM(brfilename, doc, ".." + File.separator + "dtds" + File.separator + "button_remote.dtd");
    }

    public boolean is_valid() {
        return valid;
    }

    public String get_name() {
        return name;
    }

    public String get_id() {
        return id;
    }

    public int get_no_states() {
        return states.length;
    }

    public int get_no_buttons() {
        return buttons.length;
    }

    public button get_button(int i) {
        return buttons[i];
    }
    
    private void init(String id, String name, String description, String[] rdffiles, button[] buttons, String[] states) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.rdffiles = rdffiles;
        this.buttons = buttons;
        this.states = states;
        valid = true;
    }

    public button_remote(String id, String name, String description, String[] rdffiles, button[] buttons, String[] states) {
        init(id, name, description, rdffiles, buttons, states);
    }

    public button_remote(Document doc) {
        Element root = doc.getDocumentElement();
        id = root.getAttribute("id");
        name = root.getAttribute("name");
        description = root.getAttribute("description");
        NodeList nl = root.getElementsByTagName("rdffile");
        rdffiles = new String[nl.getLength()];
        for (int i = 0; i < nl.getLength(); i++)
            rdffiles[i] = ((Element)nl.item(i)).getAttribute("file");

        nl = root.getElementsByTagName("button");
        buttons = new button[nl.getLength()];
        for (int i = 0; i < nl.getLength(); i++) {
            Element e = (Element) nl.item(i);
            buttons[i] = new button(e.getAttribute("name"), null, Short.parseShort(e.getAttribute("keycode")));
        }

        nl = root.getElementsByTagName("state");
        states = new String[nl.getLength()];
        for (int i = 0; i < nl.getLength(); i++)
            states[i] = ((Element)nl.item(i)).getAttribute("name");
        valid = true;
    }

    public button_remote(File f) throws IOException, SAXParseException, SAXException {
        this(harcutils.open_xmlfile(f));
    }

    public button_remote(String name) throws IOException, SAXParseException, SAXException {
        this((new File(name)).exists() ? (new File(name)) : new File(harcprops.get_instance().get_buttons_remotesdir() + File.separator + name + "." + extension));
    }

    public static String[] get_button_remotes() {
        String[] files = (new File(harcprops.get_instance().get_buttons_remotesdir())).list(new extension_filter(extension));
        if (files == null)
            return null;
        for (int i = 0; i < files.length; i++)
            files[i] = files[i].replaceFirst("\\." + extension + "$", "");
        return files;
    }

    public static void main(String[] args) {
        harcutils.printtable(null, get_button_remotes());
    }
}
